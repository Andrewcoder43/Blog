{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyh\\\\OneDrive\\\\Documents\\\\GitHub\\\\Blog\\\\my-blog\\\\src\\\\CommentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './CommentSection.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentSection = ({\n  blogId\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  useEffect(() => {\n    // Simulating fetching comments for the specific blog post\n    const fetchedComments = [{\n      id: 1,\n      text: 'This is a sample comment for blog post ' + blogId,\n      author: 'John Doe'\n    }];\n    setComments(fetchedComments);\n  }, [blogId]);\n  const handleSubmitComment = e => {\n    e.preventDefault();\n    if (newComment.trim()) {\n      const comment = {\n        id: Date.now(),\n        // Use timestamp as a unique id\n        text: newComment,\n        author: 'Anonymous User'\n      };\n      setComments(prevComments => [...prevComments, comment]);\n      setNewComment('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmitComment,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Add a comment...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-list\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"By \", comment.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentSection, \"MxCDS9ewhkO9e8lz5YjyzEXdntQ=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CommentSection","blogId","_s","comments","setComments","newComment","setNewComment","fetchedComments","id","text","author","handleSubmitComment","e","preventDefault","trim","comment","Date","now","prevComments","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","type","map","_c","$RefreshReg$"],"sources":["C:/Users/andyh/OneDrive/Documents/GitHub/Blog/my-blog/src/CommentSection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './CommentSection.css';\r\n\r\nconst CommentSection = ({ blogId }) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n\r\n    useEffect(() => {\r\n        // Simulating fetching comments for the specific blog post\r\n        const fetchedComments = [\r\n            { id: 1, text: 'This is a sample comment for blog post ' + blogId, author: 'John Doe' }\r\n        ];\r\n        setComments(fetchedComments);\r\n    }, [blogId]);\r\n\r\n    const handleSubmitComment = (e) => {\r\n        e.preventDefault();\r\n        if (newComment.trim()) {\r\n            const comment = {\r\n                id: Date.now(), // Use timestamp as a unique id\r\n                text: newComment,\r\n                author: 'Anonymous User'\r\n            };\r\n            setComments(prevComments => [...prevComments, comment]);\r\n            setNewComment('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"comment-section\">\r\n            <h3>Comments</h3>\r\n            <form onSubmit={handleSubmitComment}>\r\n                <textarea\r\n                    value={newComment}\r\n                    onChange={(e) => setNewComment(e.target.value)}\r\n                    placeholder=\"Add a comment...\"\r\n                />\r\n                <button type=\"submit\">Post Comment</button>\r\n            </form>\r\n            <div className=\"comments-list\">\r\n                {comments.map(comment => (\r\n                    <div key={comment.id} className=\"comment\">\r\n                        <p>{comment.text}</p>\r\n                        <small>By {comment.author}</small>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CommentSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}