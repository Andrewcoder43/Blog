{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyh\\\\OneDrive\\\\Documents\\\\GitHub\\\\Blog\\\\my-blog\\\\src\\\\BlogProvider.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BlogContext = /*#__PURE__*/createContext();\nconst initialBlogsState = [];\nexport const BlogProvider = ({\n  children\n}) => {\n  _s();\n  const [blogs, setBlogs] = useState(initialBlogsState);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        setIsLoading(true);\n        setBlogs(mockBlogData);\n      } catch (err) {\n        setError('Failed to fetch blogs');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchBlogs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BlogContext.Provider, {\n    value: {\n      blogs,\n      isLoading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(BlogProvider, \"+59B2g1g/dR+pMdOVTzPr9teixM=\");\n_c = BlogProvider;\nvar _c;\n$RefreshReg$(_c, \"BlogProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","BlogContext","initialBlogsState","BlogProvider","children","_s","blogs","setBlogs","isLoading","setIsLoading","error","setError","fetchBlogs","mockBlogData","err","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/andyh/OneDrive/Documents/GitHub/Blog/my-blog/src/BlogProvider.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const BlogContext = createContext();\r\n\r\nconst initialBlogsState = [];\r\n\r\nexport const BlogProvider = ({ children }) => {\r\n    const [blogs, setBlogs] = useState(initialBlogsState);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchBlogs = async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                setBlogs(mockBlogData);\r\n            } catch (err) {\r\n                setError('Failed to fetch blogs');\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchBlogs();\r\n    }, []);\r\n\r\n    return (\r\n        <BlogContext.Provider value={{ blogs, isLoading, error }}>\r\n            {children}\r\n        </BlogContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAE1C,MAAMM,iBAAiB,GAAG,EAAE;AAE5B,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACK,iBAAiB,CAAC;EACrD,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACAH,YAAY,CAAC,IAAI,CAAC;QAClBF,QAAQ,CAACM,YAAY,CAAC;MAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVH,QAAQ,CAAC,uBAAuB,CAAC;MACrC,CAAC,SAAS;QACNF,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC;IAEDG,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIZ,OAAA,CAACC,WAAW,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEV,KAAK;MAAEE,SAAS;MAAEE;IAAM,CAAE;IAAAN,QAAA,EACpDA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACf,EAAA,CAzBWF,YAAY;AAAAkB,EAAA,GAAZlB,YAAY;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}