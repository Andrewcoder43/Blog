{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const UserContext=/*#__PURE__*/createContext(null);export const UserProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);useEffect(()=>{// Check if user is stored in localStorage on component mount\nconst storedUser=localStorage.getItem('user');if(storedUser){setUser(JSON.parse(storedUser));}},[]);const register=(username,password)=>{// In a real app, you'd hash the password before storing it\nconst newUser={username,password};localStorage.setItem('user',JSON.stringify(newUser));setUser(newUser);console.log('User registered:',newUser);// For debugging\n};const login=(username,password)=>{console.log('Login attempt for:',username);// For debugging\nconst storedUser=JSON.parse(localStorage.getItem('user'));console.log('Stored user:',storedUser);// For debugging\nif(storedUser&&storedUser.username===username&&storedUser.password===password){setUser(storedUser);console.log('Login successful');// For debugging\nreturn true;}console.log('Login failed');// For debugging\nreturn false;};const logout=()=>{localStorage.removeItem('user');setUser(null);};return/*#__PURE__*/_jsx(UserContext.Provider,{value:{user,register,login,logout},children:children});};export const useUser=()=>useContext(UserContext);","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","UserContext","UserProvider","_ref","children","user","setUser","storedUser","localStorage","getItem","JSON","parse","register","username","password","newUser","setItem","stringify","console","log","login","logout","removeItem","Provider","value","useUser"],"sources":["C:/Users/andyh/OneDrive/Documents/GitHub/Blog/my-blog/src/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst UserContext = createContext(null);\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check if user is stored in localStorage on component mount\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n  }, []);\r\n\r\n  const register = (username, password) => {\r\n    // In a real app, you'd hash the password before storing it\r\n    const newUser = { username, password };\r\n    localStorage.setItem('user', JSON.stringify(newUser));\r\n    setUser(newUser);\r\n    console.log('User registered:', newUser); // For debugging\r\n  };\r\n\r\n  const login = (username, password) => {\r\n    console.log('Login attempt for:', username); // For debugging\r\n    const storedUser = JSON.parse(localStorage.getItem('user'));\r\n    console.log('Stored user:', storedUser); // For debugging\r\n    if (storedUser && storedUser.username === username && storedUser.password === password) {\r\n      setUser(storedUser);\r\n      console.log('Login successful'); // For debugging\r\n      return true;\r\n    }\r\n    console.log('Login failed'); // For debugging\r\n    return false;\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, register, login, logout }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useUser = () => useContext(UserContext);"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,IAAI,CAAC,CAEvC,MAAO,MAAM,CAAAO,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAEtCE,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAS,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAC/C,GAAIF,UAAU,CAAE,CACdD,OAAO,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC,CACjC,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAK,QAAQ,CAAGA,CAACC,QAAQ,CAAEC,QAAQ,GAAK,CACvC;AACA,KAAM,CAAAC,OAAO,CAAG,CAAEF,QAAQ,CAAEC,QAAS,CAAC,CACtCN,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAEN,IAAI,CAACO,SAAS,CAACF,OAAO,CAAC,CAAC,CACrDT,OAAO,CAACS,OAAO,CAAC,CAChBG,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEJ,OAAO,CAAC,CAAE;AAC5C,CAAC,CAED,KAAM,CAAAK,KAAK,CAAGA,CAACP,QAAQ,CAAEC,QAAQ,GAAK,CACpCI,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEN,QAAQ,CAAC,CAAE;AAC7C,KAAM,CAAAN,UAAU,CAAGG,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAC3DS,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEZ,UAAU,CAAC,CAAE;AACzC,GAAIA,UAAU,EAAIA,UAAU,CAACM,QAAQ,GAAKA,QAAQ,EAAIN,UAAU,CAACO,QAAQ,GAAKA,QAAQ,CAAE,CACtFR,OAAO,CAACC,UAAU,CAAC,CACnBW,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAAE;AACjC,MAAO,KAAI,CACb,CACAD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAAE;AAC7B,MAAO,MAAK,CACd,CAAC,CAED,KAAM,CAAAE,MAAM,CAAGA,CAAA,GAAM,CACnBb,YAAY,CAACc,UAAU,CAAC,MAAM,CAAC,CAC/BhB,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAED,mBACEN,IAAA,CAACC,WAAW,CAACsB,QAAQ,EAACC,KAAK,CAAE,CAAEnB,IAAI,CAAEO,QAAQ,CAAEQ,KAAK,CAAEC,MAAO,CAAE,CAAAjB,QAAA,CAC5DA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAqB,OAAO,CAAGA,CAAA,GAAM5B,UAAU,CAACI,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}